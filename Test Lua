-- Services
local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local UIS = game:GetService("UserInputService")
local player = Players.LocalPlayer
local camera = workspace.CurrentCamera

-- Variables
local triggerEnabled = false      -- Menu et triggerbot activé/désactivé (toggle Ctrl droit)
local triggerActive = false       -- Tir actif uniquement quand on maintient la touche C
local toggleMenuKey = Enum.KeyCode.RightControl
local triggerKey = Enum.KeyCode.C

local checkInterval = 0.1         -- Vérification toutes les 100 ms pour réduire lag
local lastCheck = 0
local clickCooldown = 0.1         -- 100 ms entre clics
local lastClick = 0

local predictionTimes = {["50ms"] = 0.05, ["80ms"] = 0.08}
local currentPrediction = "50ms"

local hitParts = {
	"Head", "UpperTorso", "Torso", "LowerTorso",
	"LeftUpperArm", "RightUpperArm",
	"LeftLowerArm", "RightLowerArm",
	"LeftHand", "RightHand",
	"LeftUpperLeg", "RightUpperLeg",
	"LeftLowerLeg", "RightLowerLeg",
	"LeftFoot", "RightFoot"
}

-- GUI
local ScreenGui = Instance.new("ScreenGui")
ScreenGui.Name = "TriggerBotGUI"
ScreenGui.ResetOnSpawn = false
ScreenGui.Parent = player:WaitForChild("PlayerGui")

local Frame = Instance.new("Frame")
Frame.Size = UDim2.new(0, 270, 0, 130)
Frame.Position = UDim2.new(0, 10, 0, 10)
Frame.BackgroundColor3 = Color3.fromRGB(30, 30, 30)
Frame.BorderSizePixel = 0
Frame.Visible = false
Frame.Parent = ScreenGui

local Title = Instance.new("TextLabel")
Title.Size = UDim2.new(1, 0, 0, 30)
Title.BackgroundTransparency = 1
Title.Text = "TriggerBot by ArchScrim"
Title.TextColor3 = Color3.fromRGB(255, 255, 255)
Title.TextScaled = true
Title.Font = Enum.Font.GothamBold
Title.Parent = Frame

local StatusLabel = Instance.new("TextLabel")
StatusLabel.Size = UDim2.new(1, -20, 0, 25)
StatusLabel.Position = UDim2.new(0, 10, 0, 40)
StatusLabel.BackgroundTransparency = 1
StatusLabel.TextColor3 = Color3.fromRGB(0, 255, 0)
StatusLabel.TextScaled = true
StatusLabel.Font = Enum.Font.Gotham
StatusLabel.Text = "Status: OFF"
StatusLabel.TextXAlignment = Enum.TextXAlignment.Left
StatusLabel.Parent = Frame

local PredictionLabel = Instance.new("TextLabel")
PredictionLabel.Size = UDim2.new(1, -20, 0, 25)
PredictionLabel.Position = UDim2.new(0, 10, 0, 70)
PredictionLabel.BackgroundTransparency = 1
PredictionLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
PredictionLabel.TextScaled = true
PredictionLabel.Font = Enum.Font.Gotham
PredictionLabel.Text = "Prediction: 50ms"
PredictionLabel.TextXAlignment = Enum.TextXAlignment.Left
PredictionLabel.Parent = Frame

local TogglePredictionButton = Instance.new("TextButton")
TogglePredictionButton.Size = UDim2.new(0, 150, 0, 30)
TogglePredictionButton.Position = UDim2.new(0, 10, 0, 100)
TogglePredictionButton.BackgroundColor3 = Color3.fromRGB(70, 70, 70)
TogglePredictionButton.TextColor3 = Color3.fromRGB(255, 255, 255)
TogglePredictionButton.Text = "Toggle Prediction"
TogglePredictionButton.Font = Enum.Font.GothamSemibold
TogglePredictionButton.TextScaled = true
TogglePredictionButton.Parent = Frame

TogglePredictionButton.MouseButton1Click:Connect(function()
	if currentPrediction == "50ms" then
		currentPrediction = "80ms"
	else
		currentPrediction = "50ms"
	end
	PredictionLabel.Text = "Prediction: "..currentPrediction
end)

-- Fonctions

local function canSee(part)
	local origin = camera.CFrame.Position
	local direction = (part.Position - origin)
	local rayParams = RaycastParams.new()
	rayParams.FilterDescendantsInstances = {player.Character}
	rayParams.FilterType = Enum.RaycastFilterType.Blacklist
	local rayResult = workspace:Raycast(origin, direction, rayParams)
	return rayResult and rayResult.Instance and rayResult.Instance:IsDescendantOf(part.Parent)
end

local function isValidTarget(character)
	if not character then return false end
	local humanoid = character:FindFirstChildOfClass("Humanoid")
	if not humanoid or humanoid.Health <= 5 then
		return false
	end
	return true
end

local function getPredictedPosition(part, latency)
	if not part or not part.Parent then return nil end
	local root = part.Parent:FindFirstChild("HumanoidRootPart")
	if not root then return part.Position end
	local velocity = root.Velocity or Vector3.new(0, 0, 0)
	return part.Position + velocity * latency
end

local function getTargetUnderCursor()
	local mousePos = UIS:GetMouseLocation()
	local closestDist = math.huge
	local closestPart = nil

	for _, plr in pairs(Players:GetPlayers()) do
		if plr ~= player and plr.Character and isValidTarget(plr.Character) then
			for _, partName in ipairs(hitParts) do
				local part = plr.Character:FindFirstChild(partName)
				if part and canSee(part) then
					local predictedPos = getPredictedPosition(part, predictionTimes[currentPrediction])
					local screenPos, onScreen = camera:WorldToViewportPoint(predictedPos)
					if onScreen then
						local dist = (Vector2.new(screenPos.X, screenPos.Y) - Vector2.new(mousePos.X, mousePos.Y)).Magnitude
						if dist < closestDist and dist <= 15 then -- seuil 15px près du curseur
							closestDist = dist
							closestPart = part
						end
					end
				end
			end
		end
	end
	return closestPart
end

-- Input handling

UIS.InputBegan:Connect(function(input, gameProcessed)
	if gameProcessed then return end
	if input.KeyCode == toggleMenuKey then
		triggerEnabled = not triggerEnabled
		Frame.Visible = triggerEnabled
		StatusLabel.Text = "Status: "..(triggerEnabled and "ON" or "OFF")
	end
	if input.KeyCode == triggerKey then
		triggerActive = true
	end
end)

UIS.InputEnded:Connect(function(input)
	if input.KeyCode == triggerKey then
		triggerActive = false
	end
end)

-- Main loop

RunService.Heartbeat:Connect(function()
	if not triggerEnabled or not triggerActive then return end
	local now = tick()
	if now - lastCheck < checkInterval then return end
	lastCheck = now

	local targetPart = getTargetUnderCursor()
	if targetPart and now - lastClick >= clickCooldown then
		lastClick = now
		mouse1press()
		mouse1release()
	end
end)
